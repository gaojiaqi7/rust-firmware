## Build QemuFspPkg  for Rust-firmware

**Note:** Assume you are familiar with EDK2. If not, goto [Getting Started with EDK II](https://github.com/tianocore/tianocore.github.io/wiki/Getting-Started-with-EDK-II)


### 1. Required Edk2 Version `edk2-stable202011`

```bash
git clone -b edk2-stable202011 https://github.com/tianocore/edk2.git
cd edk2
git submodule update --init
pushd BaseTools
make
popd
source edksetup.sh
# make sure you can build OVMF
build -p OvmfPkg/OvmfPkgX64.dsc -t GCC5 -a X64
```

### 2. Download and apply QemuFspPkg Patch

```bash
wget https://github.com/slimbootloader/slimbootloader/raw/master/Silicon/QemuSocPkg/FspBin/Patches/0001-Build-QEMU-FSP-2.0-binaries.patch
git am --keep-cr --whitespace=nowarn 0001-Build-QEMU-FSP-2.0-binaries.patch
```

### 3. Build QemuFspPkg

    **Note:  python3 is required**

```
python BuildFsp.py /r
```

### 4. Split `QEMU_FSP_RELEASE.fd`

Tools can be found in edk2/IntelFsp2Pkg/Tools/SplitFspBin.py

```
# Split FSP release to FSP-T FSP-M FSP-S
mkdir SplitOuts
python IntelFsp2Pkg/Tools/SplitFspBin.py split -f BuildFsp/QEMU_FSP_RELEASE.fd -o SplitOuts/
```

### 5.  Rebase `FSP-T, FSP-M, FSP-S`

FSP-T FSP-M FSP-S will be build into `final.bin` through `rust-firmware-tool` and we should rebase FSP-T FSP-M FSP-S fv. The base address of these files is generated by `rust-firmware-layout`.

#### 5.1 Configure `rust-firmware-layout`

Edit rust-firmware-layout/etc/config.json
Set below size to the size of generated FSP-T/M/S file.
```
{
....
	"fsp_t_size": 0x3000,
	"fsp_m_size": 0x22000,
	"fsp_s_size": 0x15000,
....
}
```
Run `cargo build -p rust-firmware-layout` to generate `rust-firmware-layout/src/build_time.rs`
Blow is an example of the generated file.
```
...
pub  const  LOADED_FSP_T_BASE: u32  =  0xFFFC5000;
pub  const  LOADED_FSP_M_BASE: u32  =  0xFFFC8000;
pub  const  LOADED_FSP_S_BASE: u32  =  0xFFFEA000;
...
```
 `LOADED_FSP_T_BASE` `LOADED_FSP_T_BASE` `LOADED_FSP_T_BASE`  They are the base address of FSP-T/M/S we need to rebase.

#### 5.2  Rebase the FSP-T/M/S

Tools can be found in edk2/IntelFsp2Pkg/Tools/SplitFspBin.py

```
python IntelFsp2Pkg/Tools/SplitFspBin.py rebase -f SplitOuts/QEMU_FSP_RELEASE_T.fd -c t -b 0xFFFC5000 -o RebaseOuts/
python IntelFsp2Pkg/Tools/SplitFspBin.py rebase -f SplitOuts/QEMU_FSP_RELEASE_M.fd -c m -b 0xFFFC8000 -o RebaseOuts/
python IntelFsp2Pkg/Tools/SplitFspBin.py rebase -f SplitOuts/QEMU_FSP_RELEASE_S.fd -c s -b 0xFFFEA000 -o RebaseOuts/
```
#### 5.3. Use rebased Fsp Files in `rust-firmware-tool`

`rust-firmware-tool` will read environment variables to build `final.bin` Firmware.

* `RUST_FIRMWARE_TOOL_FSP_M_FILE`
* `RUST_FIRMWARE_TOOL_FSP_T_FILE`
* `RUST_FIRMWARE_TOOL_FSP_S_FILE`

Export these environment variables

```
export RUST_FIRMWARE_TOOL_FSP_T_FILE=`pwd`/RebaseOuts/QEMU_FSP_RELEASE_T_FFFC5000.fd
export RUST_FIRMWARE_TOOL_FSP_S_FILE=`pwd`/RebaseOuts/QEMU_FSP_RELEASE_M_FFFC8000.fd
export RUST_FIRMWARE_TOOL_FSP_S_FILE=`pwd`/RebaseOuts/QEMU_FSP_RELEASE_S_FFFEA000.fd
```

Now you can use `rust-firmware-tool` to generate the `final.bin`[^1]


[^1]: final.bin is generated by `rust-firmware-tool` and can be used in QEMU.

